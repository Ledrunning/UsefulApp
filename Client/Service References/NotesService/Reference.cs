//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.Serialization;

namespace Client.Service_References.NotesService {
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="NotesData", Namespace="http://schemas.datacontract.org/2004/07/GeneralContract")]
    [Serializable()]
    public partial class NotesData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [OptionalField()]
        private string ContentField;
        
        [OptionalField()]
        private string HeaderField;
        
        [OptionalField()]
        private System.Guid IdField;
        
        [OptionalField()]
        private int TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [DataMember()]
        public string Header {
            get {
                return this.HeaderField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderField, value) != true)) {
                    this.HeaderField = value;
                    this.RaisePropertyChanged("Header");
                }
            }
        }
        
        [DataMember()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [DataMember()]
        public int Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesService.INoteServiceContract")]
    public interface INoteServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Add", ReplyAction="http://tempuri.org/INoteServiceContract/AddResponse")]
        void Add(NotesData nd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Add", ReplyAction="http://tempuri.org/INoteServiceContract/AddResponse")]
        System.Threading.Tasks.Task AddAsync(NotesData nd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetById", ReplyAction="http://tempuri.org/INoteServiceContract/GetByIdResponse")]
        void GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetById", ReplyAction="http://tempuri.org/INoteServiceContract/GetByIdResponse")]
        System.Threading.Tasks.Task GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetAll", ReplyAction="http://tempuri.org/INoteServiceContract/GetAllResponse")]
        NotesData[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetAll", ReplyAction="http://tempuri.org/INoteServiceContract/GetAllResponse")]
        System.Threading.Tasks.Task<NotesData[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/SearchBy", ReplyAction="http://tempuri.org/INoteServiceContract/SearchByResponse")]
        string SearchBy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/SearchBy", ReplyAction="http://tempuri.org/INoteServiceContract/SearchByResponse")]
        System.Threading.Tasks.Task<string> SearchByAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteNoteResponse")]
        void DeleteNote(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Edit", ReplyAction="http://tempuri.org/INoteServiceContract/EditResponse")]
        void Edit(NotesData nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Edit", ReplyAction="http://tempuri.org/INoteServiceContract/EditResponse")]
        System.Threading.Tasks.Task EditAsync(NotesData nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteAll", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteAllResponse")]
        void DeleteAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteAll", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteAllResponse")]
        System.Threading.Tasks.Task DeleteAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteServiceContractChannel : INoteServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteServiceContractClient : System.ServiceModel.ClientBase<INoteServiceContract>, INoteServiceContract {
        
        public NoteServiceContractClient() {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(NotesData nd) {
            base.Channel.Add(nd);
        }
        
        public System.Threading.Tasks.Task AddAsync(NotesData nd) {
            return base.Channel.AddAsync(nd);
        }
        
        public void GetById(System.Guid id) {
            base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public NotesData[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<NotesData[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public string SearchBy() {
            return base.Channel.SearchBy();
        }
        
        public System.Threading.Tasks.Task<string> SearchByAsync() {
            return base.Channel.SearchByAsync();
        }
        
        public void DeleteNote(System.Guid id) {
            base.Channel.DeleteNote(id);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(System.Guid id) {
            return base.Channel.DeleteNoteAsync(id);
        }
        
        public void Edit(NotesData nt) {
            base.Channel.Edit(nt);
        }
        
        public System.Threading.Tasks.Task EditAsync(NotesData nt) {
            return base.Channel.EditAsync(nt);
        }
        
        public void DeleteAll() {
            base.Channel.DeleteAll();
        }
        
        public System.Threading.Tasks.Task DeleteAllAsync() {
            return base.Channel.DeleteAllAsync();
        }
    }
}
