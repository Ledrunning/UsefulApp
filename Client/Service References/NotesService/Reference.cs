//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using TotalContract;

namespace Client.Service_References.NotesService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotesService.INoteServiceContract")]
    public interface INoteServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Add", ReplyAction="http://tempuri.org/INoteServiceContract/AddResponse")]
        void Add(NotesDataModel nd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Add", ReplyAction="http://tempuri.org/INoteServiceContract/AddResponse")]
        System.Threading.Tasks.Task AddAsync(NotesDataModel nd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetById", ReplyAction="http://tempuri.org/INoteServiceContract/GetByIdResponse")]
        void GetById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetById", ReplyAction="http://tempuri.org/INoteServiceContract/GetByIdResponse")]
        System.Threading.Tasks.Task GetByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetAll", ReplyAction="http://tempuri.org/INoteServiceContract/GetAllResponse")]
        NotesDataModel[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/GetAll", ReplyAction="http://tempuri.org/INoteServiceContract/GetAllResponse")]
        System.Threading.Tasks.Task<NotesDataModel[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/SearchBy", ReplyAction="http://tempuri.org/INoteServiceContract/SearchByResponse")]
        string SearchBy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/SearchBy", ReplyAction="http://tempuri.org/INoteServiceContract/SearchByResponse")]
        System.Threading.Tasks.Task<string> SearchByAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteNoteResponse")]
        void DeleteNote(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteNote", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Edit", ReplyAction="http://tempuri.org/INoteServiceContract/EditResponse")]
        void Edit(NotesDataModel nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/Edit", ReplyAction="http://tempuri.org/INoteServiceContract/EditResponse")]
        System.Threading.Tasks.Task EditAsync(NotesDataModel nt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteAll", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteAllResponse")]
        void DeleteAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INoteServiceContract/DeleteAll", ReplyAction="http://tempuri.org/INoteServiceContract/DeleteAllResponse")]
        System.Threading.Tasks.Task DeleteAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INoteServiceContractChannel : INoteServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NoteServiceContractClient : System.ServiceModel.ClientBase<INoteServiceContract>, INoteServiceContract {
        
        public NoteServiceContractClient() {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NoteServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(NotesDataModel nd) {
            base.Channel.Add(nd);
        }
        
        public System.Threading.Tasks.Task AddAsync(NotesDataModel nd) {
            return base.Channel.AddAsync(nd);
        }
        
        public void GetById(System.Guid id) {
            base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task GetByIdAsync(System.Guid id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public NotesDataModel[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<NotesDataModel[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public string SearchBy() {
            return base.Channel.SearchBy();
        }
        
        public System.Threading.Tasks.Task<string> SearchByAsync() {
            return base.Channel.SearchByAsync();
        }
        
        public void DeleteNote(System.Guid id) {
            base.Channel.DeleteNote(id);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(System.Guid id) {
            return base.Channel.DeleteNoteAsync(id);
        }
        
        public void Edit(NotesDataModel nt) {
            base.Channel.Edit(nt);
        }
        
        public System.Threading.Tasks.Task EditAsync(NotesDataModel nt) {
            return base.Channel.EditAsync(nt);
        }
        
        public void DeleteAll() {
            base.Channel.DeleteAll();
        }
        
        public System.Threading.Tasks.Task DeleteAllAsync() {
            return base.Channel.DeleteAllAsync();
        }
    }
}
